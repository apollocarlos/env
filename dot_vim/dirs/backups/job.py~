#!/usr/bin/env python
# encoding: utf-8

import sys
import os
import unittest
import logging
import traceback
from datetime import datetime
from lbeb.ikasan import Ikasan

base_dir = os.path.dirname(os.path.abspath(__file__)) + "/.."

Class JobInterface:
    def __init__(self, setting, date):
        self.setting = setting
        self.date = date
        self.occurred_error_exit_code = 1
        self.init_success = True
        logging.getLogger("requests").setLevel(logging.WARNING)
    def prepare(self):
        pass
    def process(self):
        pass
    def cleanup(self):
        pass
    def validate_before(self):
        return True
    def validate_after(self):
        return True
    def get_date(self):
        return self.date
    def get_setting(self):
        return self.setting
    def set_init_fail(self):
        self.init_success = False
    def succeeded_init(self):
        if hasattr(self, "init_success"):
            return self.init_success
        return True
class Controller:
    def __init__(self, notify, skip):
        self._jobs = []
        self.notify = notify
        self.skip = skip

    def subscribe(self, job):
        self._jobs.append(job)

    def run(self):
        for o in self._jobs:
            print "------------------------------------------------------"
            print "%s : %s " % (o.__class__.__name__, o.get_date())
            print "------------------------------------------------------"
            if self.skip == True:
                print "skip"
                continue
            if os.path.exists(os.path.join(base_dir, "var", "dry-run.%s" % (os.getpid()))) == True:
                self.execute(o)
            else:
                self.execute(o)
        sys.exit(0)

    def execute(self, o):
        start_time = datetime.now()
        o.prepare()
        hipchat_config = o.setting.config['ikasan']

        if o.succeeded_init():
            # validation check
            val_ret = True
            err_msg = ""
            err_detail = ""
            try:
                val_ret = o.validate_before()
            except:
                err_detail = "\n".join(traceback.format_exception(sys.exc_info()[0],sys.exc_info()[1],sys.exc_info()[2]))
                err_msg = traceback.format_exception_only(sys.exc_info()[0], sys.exc_info()[1])
                val_ret = False
            if val_ret == False:
                retstr = self.errMsgFormat(o.__class__.__name__, "validate_before", err_msg, o.get_date(), err_detail)
                print "Result : \n%s" % retstr
                if self.notify == True:
                    self.notification(hipchat_config, retstr)
                sys.exit(1)
            try:
              val_ret = True
              o.process()
            except:
              err_detail = "\n".join(traceback.format_exception(sys.exc_info()[0],sys.exc_info()[1],sys.exc_info()[2]))
              err_msg = traceback.format_exception_only(sys.exc_info()[0], sys.exc_info()[1])
              val_ret = False
            if val_ret == False:
              retstr = self.errMsgFormat(o.__class__.__name__, "process", err_msg, o.get_date(), err_detail)
              print "Result : %s" % retstr
              if self.notify == True:
                  self.notification(hipchat_config, retstr)
              sys.exit(1)

            val_ret = True
            err_msg = ""
            err_detail = ""
            try:
                val_ret = o.validate_after()
            except:
                err_detail = "\n".join(traceback.format_exception(sys.exc_info()[0],sys.exc_info()[1],sys.exc_info()[2]))
                err_msg = traceback.format_exception_only(sys.exc_info()[0], sys.exc_info()[1])
                val_ret = False
            if val_ret == False:
                retstr = self.errMsgFormat(o.__class__.__name__, "validate_after", err_msg, o.get_date(), err_detail)
                print "Result : %s" % retstr
                if self.notify == True:
                    self.notification(hipchat_config, retstr)
                sys.exit(1)

        else:
            print "Skip the 'process' step due to initiation failure"
        o.cleanup()

        end_time = datetime.now()
        print "Finished : %s   ~    %s\n" % (start_time, end_time)
        print "Result : [Success] %s job successfully ended for %s" % (o.__class__.__name__, o.get_date())

    # error message format
    def errMsgFormat(self, clz_name, method_name, err_msg, param, err_detail):
        return "【 %s 】| %s |\n> %s\n> date=%s\n----\n%s" % (clz_name, method_name, err_msg, param, err_detail)

    def notification(self, hipchat_config, message):
        self.ikasan = Ikasan(hipchat_config['notice_url'], hipchat_config['hipchat_jp_dev3_analytics_room'])
        self.ikasan.notificationNickname(message)


class ControllerTests(unittest.TestCase):
    def setUp(self):
        pass
    def testDummy(self):
        test = Controller()
        test.subscribe(JobInterface(None))
        test.run()
        test.print_result()

if __name__ == '__main__':
    unittest.main()
